[{"/Users/lulu/Desktop/Coursera/React/confusion/src/reportWebVitals.js":"1","/Users/lulu/Desktop/Coursera/React/confusion/src/index.js":"2","/Users/lulu/Desktop/Coursera/React/confusion/src/App.js":"3","/Users/lulu/Desktop/Coursera/React/confusion/src/components/MenuComponent.js":"4","/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Dishes.js":"5","/Users/lulu/Desktop/Coursera/React/confusion/src/components/DishDetailComponent.js":"6","/Users/lulu/Desktop/Coursera/React/confusion/src/components/MainComponent.js":"7","/Users/lulu/Desktop/Coursera/React/confusion/src/components/HeaderComponent.js":"8","/Users/lulu/Desktop/Coursera/React/confusion/src/components/FooterComponent.js":"9","/Users/lulu/Desktop/Coursera/React/confusion/src/components/HomeComponent.js":"10","/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Comments.js":"11","/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Leaders.js":"12","/Users/lulu/Desktop/Coursera/React/confusion/src/components/ContactComponent.js":"13","/Users/lulu/Desktop/Coursera/React/confusion/src/components/AboutComponent.js":"14","/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Promotions.js":"15","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/configureStore.js":"16"},{"size":362,"mtime":1610259594554,"results":"17","hashOfConfig":"18"},{"size":639,"mtime":1610508618220,"results":"19","hashOfConfig":"18"},{"size":640,"mtime":1611202554083,"results":"20","hashOfConfig":"18"},{"size":2070,"mtime":1610527465089,"results":"21","hashOfConfig":"18"},{"size":1448,"mtime":1610517164761,"results":"22","hashOfConfig":"18"},{"size":2874,"mtime":1610527356451,"results":"23","hashOfConfig":"18"},{"size":2503,"mtime":1610588623340,"results":"24","hashOfConfig":"18"},{"size":5256,"mtime":1610865400922,"results":"25","hashOfConfig":"18"},{"size":2583,"mtime":1610513576744,"results":"26","hashOfConfig":"18"},{"size":1255,"mtime":1610519227605,"results":"27","hashOfConfig":"18"},{"size":4117,"mtime":1610517206689,"results":"28","hashOfConfig":"18"},{"size":2345,"mtime":1610517191711,"results":"29","hashOfConfig":"18"},{"size":11179,"mtime":1610862279067,"results":"30","hashOfConfig":"18"},{"size":4236,"mtime":1610711353048,"results":"31","hashOfConfig":"18"},{"size":435,"mtime":1610517180774,"results":"32","hashOfConfig":"18"},{"size":248,"mtime":1611202517596,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1cmip7r",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lulu/Desktop/Coursera/React/confusion/src/reportWebVitals.js",[],["74","75"],"/Users/lulu/Desktop/Coursera/React/confusion/src/index.js",[],["76","77"],"/Users/lulu/Desktop/Coursera/React/confusion/src/App.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/MenuComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Dishes.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/DishDetailComponent.js",[],["78","79"],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/MainComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/HeaderComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/FooterComponent.js",[],["80","81"],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/HomeComponent.js",[],["82","83"],"/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Comments.js",[],["84","85"],"/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Leaders.js",[],["86","87"],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/ContactComponent.js",["88","89"],"import React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, Row, FormFeedback }from 'reactstrap'\nimport { Link } from 'react-router-dom';\n\nclass Contact extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            firstname: '',\n            lastname: '',\n            telnum: '',\n            email: '',\n            agree: false,\n            contactType: 'Tel.',\n            message: '', \n            touched: {\n                firstname: false,\n                lastname: false,\n                telnum: false,\n                email: false \n            }\n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event){\n        const target = event.target;\n        const value= target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        \n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event){\n        console.log('Current State is: ' + JSON.stringify(this.state));\n        alert('Current State is ' + JSON.stringify(this.state));\n        event.preventDefault();\n    }\n\n    // change fields to be true\n    handleBlur = (field) => (evt) => {\n        this.setState({\n            touched: { ...this.state.touched, [field]: true}\n        });\n    }\n\n    // validate fields\n    validate(firstname, lastname, telnum, email) {\n        const errors = {\n            firstname: '',\n            lastname: '',\n            telnum: '',\n            email: ''\n        };\n\n        if(this.state.touched.firstname && firstname.length < 3){\n            errors.firstname = 'First Name should be >= 3 characters';\n        }else if (this.state.touched.firstname && firstname.length > 10){\n            errors.firstname = 'First Name should be <= 10 characters';\n        }\n\n        if(this.state.touched.lastname && lastname.length < 2){\n            errors.lastname = 'Last Name should be >= 2 characters';\n        }else if (this.state.touched.lastname && lastname.length > 10){\n            errors.lastname = 'Last Name should be <= 10 characters';\n        }\n\n        // regression expression to test whether should be all numbers or not\n        const reg = /^\\d+$/;\n        if (this.state.touched.telnum && !reg.test(telnum)){\n            errors.telnum = 'Tel. Number should only contain numbers';\n        }\n\n        if(this.state.touched.email && email.split('').filter(x=>x==='@').length !== 1)\n            errors.email = 'Email shoudl contain a @';\n        \n        return errors;\n    }\n\n    render () {\n        const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                        <Breadcrumb>\n                            <BreadcrumbItem> \n                                <Link to='/home'>Home</Link>\n                            </BreadcrumbItem>\n                            <BreadcrumbItem active>Contact Us\n                            </BreadcrumbItem>\n                        </Breadcrumb>\n                        <div className=\"col-12\">\n                            <h3>Contact Us</h3>\n                            {/* a break */}\n                            <hr />\n                        </div>\n                    </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                    <h3>Location Information</h3>\n                    </div>\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\n                            <h5>Our Address</h5>\n                            <address>\n                            121, Clear Water Bay Road<br />\n                            Clear Water Bay, Kowloon<br />\n                            HONG KONG<br />\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\n                            </address>\n                    </div>\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\n                        <h5>Map of our Location</h5>\n                    </div>\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\n                        <div className=\"btn-group\" role=\"group\">\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h3>\n                            Send us your feedback\n                        </h3>\n                    </div>\n                    <div className=\"col-12 col-md-9\">\n                        <Form onSubmit={this.handleSubmit}>\n                            <FormGroup row>\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"firstname\" name=\"firstname\"\n                                        placeholder=\"First Name\"\n                                        value={this.state.firstname}\n                                        valid={errors.firstname === ''}\n                                        invalid = {errors.firstname !== ''}\n                                        onBlur = {this.handleBlur('firstname')}\n                                        onChange={this.handleInputChange} />\n                                    {/* react & bootstrap function */}\n                                    <FormFeedback>{errors.firstname}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Input type=\"text\" id=\"lastname\" name=\"lastname\"\n                                        placeholder=\"Last Name\"\n                                        value={this.state.lastname}\n                                        valid = {errors.lastname === ''}\n                                        invalid = {errors.lastname !== ''}\n                                        onBlur = {this.handleBlur('lastname')}\n                                        onChange={this.handleInputChange}/>\n                                    <FormFeedback>{errors.lastname}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\n                                <Col md={10}>\n                                    <Input type=\"tel\" id=\"telnum\" name=\"telnum\"\n                                        placeholder=\"Tel. number\"\n                                        value={this.state.telnum}\n                                        valid = {errors.telnum === ''}\n                                        invalid = {errors.telnum !== ''}\n                                        onBlur = {this.handleBlur('telnum')}\n                                        onChange={this.handleInputChange}/>\n                                    <FormFeedback>{errors.telnum}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Input type=\"email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        value={this.state.email}\n                                        valid = {errors.email === ''}\n                                        invalid = {errors.email !== ''}\n                                        onBlur = {this.handleBlur('email')}\n                                        onChange={this.handleInputChange}/>\n                                    <FormFeedback>{errors.email}</FormFeedback>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Col md={{size: 6, offset: 2}}>\n                                    <FormGroup check>\n                                        <Label check>\n                                            <Input type=\"checkbox\"\n                                                name=\"agree\"\n                                                checked={this.state.agree}\n                                                onChange={this.handleInputChange} /> {' '}\n                                            <strong>May we contact you?</strong>\n                                        </Label>\n                                    </FormGroup>\n                                </Col>\n                                <Col md={{size: 3, offset: 1}}>\n                                    <Input type=\"select\" name=\"contactType\"\n                                            value={this.state.contactType}\n                                            onChange={this.handleInputChange}>\n                                        <option>Tel.</option>\n                                        <option>Email</option>\n                                    </Input>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\n                                <Col md={10}>\n                                    <Input type=\"textarea\" id=\"message\" name=\"message\"\n                                        rows=\"12\" \n                                        value={this.state.message}\n                                        onChange={this.handleInputChange}/>\n                                </Col>\n                            </FormGroup>\n                            <FormGroup row>\n                                <Col md={{size: 10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                        Send Feedback\n                                    </Button>\n                                </Col>\n                            </FormGroup>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Contact;","/Users/lulu/Desktop/Coursera/React/confusion/src/components/AboutComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Promotions.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/configureStore.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"90","replacedBy":"96"},{"ruleId":"92","replacedBy":"97"},{"ruleId":"90","replacedBy":"98"},{"ruleId":"92","replacedBy":"99"},{"ruleId":"90","replacedBy":"100"},{"ruleId":"92","replacedBy":"101"},{"ruleId":"90","replacedBy":"102"},{"ruleId":"92","replacedBy":"103"},{"ruleId":"90","replacedBy":"104"},{"ruleId":"92","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":2,"column":82,"nodeType":"108","messageId":"109","endLine":2,"endColumn":85},{"ruleId":"110","severity":1,"message":"111","line":125,"column":29,"nodeType":"112","endLine":125,"endColumn":71},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],["113"],["114"],["113"],["114"],["113"],["114"],["113"],["114"],["113"],["114"],["113"],["114"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]