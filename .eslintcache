[{"/Users/lulu/Desktop/Coursera/React/confusion/src/reportWebVitals.js":"1","/Users/lulu/Desktop/Coursera/React/confusion/src/index.js":"2","/Users/lulu/Desktop/Coursera/React/confusion/src/App.js":"3","/Users/lulu/Desktop/Coursera/React/confusion/src/components/MenuComponent.js":"4","/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Dishes.js":"5","/Users/lulu/Desktop/Coursera/React/confusion/src/components/DishDetailComponent.js":"6","/Users/lulu/Desktop/Coursera/React/confusion/src/components/MainComponent.js":"7","/Users/lulu/Desktop/Coursera/React/confusion/src/components/HeaderComponent.js":"8","/Users/lulu/Desktop/Coursera/React/confusion/src/components/FooterComponent.js":"9","/Users/lulu/Desktop/Coursera/React/confusion/src/components/HomeComponent.js":"10","/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Comments.js":"11","/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Leaders.js":"12","/Users/lulu/Desktop/Coursera/React/confusion/src/components/ContactComponent.js":"13","/Users/lulu/Desktop/Coursera/React/confusion/src/components/AboutComponent.js":"14","/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Promotions.js":"15","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/configureStore.js":"16","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/comments.js":"17"},{"size":362,"mtime":1610259594554,"results":"18","hashOfConfig":"19"},{"size":639,"mtime":1610508618220,"results":"20","hashOfConfig":"19"},{"size":640,"mtime":1611202554083,"results":"21","hashOfConfig":"19"},{"size":2070,"mtime":1610527465089,"results":"22","hashOfConfig":"19"},{"size":1448,"mtime":1610517164761,"results":"23","hashOfConfig":"19"},{"size":7638,"mtime":1611225612863,"results":"24","hashOfConfig":"19"},{"size":2518,"mtime":1611202400895,"results":"25","hashOfConfig":"19"},{"size":5332,"mtime":1610865431971,"results":"26","hashOfConfig":"19"},{"size":2583,"mtime":1610513576744,"results":"27","hashOfConfig":"19"},{"size":1255,"mtime":1610519227605,"results":"28","hashOfConfig":"19"},{"size":4117,"mtime":1610517206689,"results":"29","hashOfConfig":"19"},{"size":2345,"mtime":1610517191711,"results":"30","hashOfConfig":"19"},{"size":13370,"mtime":1611224321502,"results":"31","hashOfConfig":"19"},{"size":4236,"mtime":1610711353048,"results":"32","hashOfConfig":"19"},{"size":435,"mtime":1610517180774,"results":"33","hashOfConfig":"19"},{"size":248,"mtime":1611202517596,"results":"34","hashOfConfig":"19"},{"size":179,"mtime":1611283246931,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1cmip7r",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lulu/Desktop/Coursera/React/confusion/src/reportWebVitals.js",[],["78","79"],"/Users/lulu/Desktop/Coursera/React/confusion/src/index.js",[],["80","81"],"/Users/lulu/Desktop/Coursera/React/confusion/src/App.js",[],["82","83"],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/MenuComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Dishes.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/DishDetailComponent.js",["84","85","86"],"import React, {Component} from 'react';\nimport { Card, CardImg, CardText, CardTitle, CardBody, Breadcrumb, BreadcrumbItem, \n    Button, ModalBody, ModalHeader, Modal, Row, Label, Col } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = (val) => val;\nconst maxLength = (len) => (val) => !(val) || (val.length<=len);\nconst minLength = (len) => (val) => (val) && (val.length > len);\n\n    class CommentForm extends Component {\n        constructor(props){\n            super(props);\n\n            this.state = {\n                isModalOpen: false\n            };\n\n            this.handleSubmit=this.handleSubmit.bind(this);\n            this.toggleModal=this.toggleModal.bind(this);\n        }\n\n        handleSubmit(values) {\n            console.log('Current State is: ' + JSON.stringify(values));\n            alert('Current State is ' + JSON.stringify(values));\n        }\n\n        toggleModal(){\n            this.setState({\n                isModalOpen: !this.state.isModalOpen\n            });\n        }\n\n        render () {\n            return(\n                <div>\n                    <Button outline onClick={this.toggleModal}>\n                        <span className=\"fa fa-pencil fa-lg\"></span> Submit Comment\n                    </Button>\n                    <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                        <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\n                        <ModalBody>\n                            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"rating\" md={12}>Rating</Label>\n                                    <Col md={{size: 3}}>\n                                        <Control.select model=\".rating\" id=\"rating\" name=\"rating\"\n                                            className=\"form-control\" >\n                                            <option>1</option>\n                                            <option>2</option>\n                                            <option>3</option>\n                                            <option>4</option>\n                                            <option>5</option>\n                                            <option>6</option>\n                                        </Control.select>\n                                    </Col>\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"name\" md={12}>Your Name</Label>\n                                    <Col md={10}>\n                                        <Control.text model=\".name\" id=\"name\" name=\"name\"\n                                            placeholder=\"Your Name\" className=\"form-control\" \n                                            validators = {{\n                                                required, minLength: minLength(3), maxLength: maxLength(15)\n                                            }} />\n                                        <Errors\n                                            className=\"text-danger\"\n                                            model=\".name\"\n                                            show=\"touched\"\n                                            messages={{\n                                                required: 'Required',\n                                                minLength: 'Must be greater than 2 characters',\n                                                maxLength: 'Must be 15 characters or less'\n                                            }}\n                                        />\n                                    </Col>\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"comment\" md={12}>Comment</Label>\n                                    <Col md={10}>\n                                        <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\n                                            rows=\"6\"\n                                            className=\"form-control\" />\n                                    </Col>\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Col md={{size:10}}>\n                                        <Button type=\"submit\" color=\"primary\">\n                                            Submit\n                                        </Button>\n                                    </Col>\n\n                                </Row>\n                            </LocalForm>\n                        </ModalBody>\n                    </Modal>\n                </div>\n            );\n        }\n    }\n\n    function RenderDish({ dish }) {\n        if(dish!=null){\n            return (\n                <Card>\n                    <CardImg width=\"100%\" src={dish.image} alt = {dish.name} />\n                    <CardBody>\n                      <CardTitle>{dish.name}</CardTitle>\n                       <CardText>{dish.description}</CardText>\n                    </CardBody>\n                </Card>\n            );\n        }else{\n            return(\n                <div></div>\n            );\n        }\n    }\n\n    function RenderComments ({comments, postComment, dishId}) {\n        if(comments!=null){\n            const c = comments.map(comment => {\n                return (\n                    <li key={comment.id}>\n                        <p>{comment.comment}</p>\n                        <p>-- {comment.author} ,\n                        &nbsp;\n                        {new Intl.DateTimeFormat('en-US', {\n                            year: 'numeric',\n                            month: 'long',\n                            day: '2-digit',\n                        }).format(new Date(comment.date))}</p>\n                    </li>\n                )\n            })\n            return (\n                <div>\n                    <h4>Comments</h4>\n                    <ul className='list-unstyled'>\n                        {c}    \n                    </ul>\n                    <CommentForm/>\n                </div>\n            )\n        }else{\n            return(\n            <div></div>\n            )\n        }\n    }\n\n\n    const DishDetail = (props) => {\n        const dish = props.dish;\n        // const c = [dish.comments];\n        // Add this to prevent null pointer\n        if (dish) {\n            return(\n                <div className=\"container\">\n                    <div className=\"row\">\n                    <Breadcrumb>\n                        <BreadcrumbItem> <Link to='/menu'>Menu</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                    <div className=\"col-12\">\n                        <h3>{props.dish.name}</h3>\n                        {/* a break */}\n                        <hr />\n                    </div>\n                </div>\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-5 m-1\">\n                            <RenderDish dish={props.dish} />\n                        </div>\n                        <div className = \"row col-12 col-md-5 m-1\">\n                            <RenderComments comments={props.comments} />\n                        </div>\n                    </div>\n                </div>\n            );\n        }else{\n            return <div></div>\n        }\n    }\n\n\n\nexport default DishDetail;","/Users/lulu/Desktop/Coursera/React/confusion/src/components/MainComponent.js",["87"],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/HeaderComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/FooterComponent.js",[],["88","89"],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/HomeComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Comments.js",[],["90","91"],"/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Leaders.js",[],["92","93"],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/ContactComponent.js",["94","95","96","97","98","99","100","101","102","103","104","105"],"import React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, Row, FormFeedback }from 'reactstrap'\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => (val) && (val.length >= len);\nconst isNumber = (val) => !isNaN(Number(val));\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass Contact extends Component {\n\n    constructor(props){\n        super(props);\n\n        // this.state = {\n        //     firstname: '',\n        //     lastname: '',\n        //     telnum: '',\n        //     email: '',\n        //     agree: false,\n        //     contactType: 'Tel.',\n        //     message: '', \n        //     touched: {\n        //         firstname: false,\n        //         lastname: false,\n        //         telnum: false,\n        //         email: false \n        //     }\n        // }\n\n        // this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // handleInputChange(event){\n    //     const target = event.target;\n    //     const value= target.type === 'checkbox' ? target.checked : target.value;\n    //     const name = target.name;\n        \n    //     this.setState({\n    //         [name]: value\n    //     });\n    // }\n\n    handleSubmit(values){\n        console.log('Current State is: ' + JSON.stringify(values));\n        alert('Current State is ' + JSON.stringify(values));\n        // event.preventDefault();\n    }\n\n    // // change fields to be true\n    // handleBlur = (field) => (evt) => {\n    //     this.setState({\n    //         touched: { ...this.state.touched, [field]: true}\n    //     });\n    // }\n\n    // // validate fields\n    // validate(firstname, lastname, telnum, email) {\n    //     const errors = {\n    //         firstname: '',\n    //         lastname: '',\n    //         telnum: '',\n    //         email: ''\n    //     };\n\n    //     if(this.state.touched.firstname && firstname.length < 3){\n    //         errors.firstname = 'First Name should be >= 3 characters';\n    //     }else if (this.state.touched.firstname && firstname.length > 10){\n    //         errors.firstname = 'First Name should be <= 10 characters';\n    //     }\n\n    //     if(this.state.touched.lastname && lastname.length < 2){\n    //         errors.lastname = 'Last Name should be >= 2 characters';\n    //     }else if (this.state.touched.lastname && lastname.length > 10){\n    //         errors.lastname = 'Last Name should be <= 10 characters';\n    //     }\n\n    //     // regression expression to test whether should be all numbers or not\n    //     const reg = /^\\d+$/;\n    //     if (this.state.touched.telnum && !reg.test(telnum)){\n    //         errors.telnum = 'Tel. Number should only contain numbers';\n    //     }\n\n    //     if(this.state.touched.email && email.split('').filter(x=>x==='@').length !== 1)\n    //         errors.email = 'Email shoudl contain a @';\n        \n    //     return errors;\n    // }\n\n    render () {\n        // const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                        <Breadcrumb>\n                            <BreadcrumbItem> \n                                <Link to='/home'>Home</Link>\n                            </BreadcrumbItem>\n                            <BreadcrumbItem active>Contact Us\n                            </BreadcrumbItem>\n                        </Breadcrumb>\n                        <div className=\"col-12\">\n                            <h3>Contact Us</h3>\n                            {/* a break */}\n                            <hr />\n                        </div>\n                    </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                    <h3>Location Information</h3>\n                    </div>\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\n                            <h5>Our Address</h5>\n                            <address>\n                            121, Clear Water Bay Road<br />\n                            Clear Water Bay, Kowloon<br />\n                            HONG KONG<br />\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\n                            </address>\n                    </div>\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\n                        <h5>Map of our Location</h5>\n                    </div>\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\n                        <div className=\"btn-group\" role=\"group\">\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h3>\n                            Send us your feedback\n                        </h3>\n                    </div>\n                    <div className=\"col-12 col-md-9\">\n                    <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\n                                        placeholder=\"First Name\"\n                                        className=\"form-control\"\n                                        validators = {{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".firstname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\n                                        placeholder=\"Last Name\"\n                                        className=\"form-control\"\n                                        validators = {{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".lastname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\n                                        placeholder=\"Tel. Number\"\n                                        className=\"form-control\"\n                                        validators = {{\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".telnum\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\" \n                                        validators = {{\n                                            required, validEmail\n                                        }}\n                                        />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid Email Address'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 6, offset: 2}}>\n                                    <div className=\"form-check\">\n                                        <Label check>\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\n                                                className=\"form-check-input\"\n                                                 /> {' '}\n                                                <strong>May we contact you?</strong>\n                                        </Label>\n                                    </div>\n                                </Col>\n                                <Col md={{size: 3, offset: 1}}>\n                                    <Control.select model=\".contactType\" name=\"contactType\"\n                                        className=\"form-control\">\n                                        <option>Tel.</option>\n                                        <option>Email</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\n                                        rows=\"12\"\n                                        className=\"form-control\" />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size:10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                    Send Feedback\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </LocalForm>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Contact;","/Users/lulu/Desktop/Coursera/React/confusion/src/components/AboutComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/shared/Promotions.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/configureStore.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/comments.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"106","replacedBy":"110"},{"ruleId":"108","replacedBy":"111"},{"ruleId":"106","replacedBy":"112"},{"ruleId":"108","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":47,"column":41,"nodeType":"116","endLine":48,"endColumn":71},{"ruleId":"114","severity":1,"message":"117","line":61,"column":41,"nodeType":"116","endLine":65,"endColumn":50},{"ruleId":"114","severity":1,"message":"118","line":81,"column":41,"nodeType":"116","endLine":83,"endColumn":72},{"ruleId":"119","severity":1,"message":"120","line":24,"column":3,"nodeType":"121","messageId":"122","endLine":26,"endColumn":4},{"ruleId":"106","replacedBy":"123"},{"ruleId":"108","replacedBy":"124"},{"ruleId":"106","replacedBy":"125"},{"ruleId":"108","replacedBy":"126"},{"ruleId":"106","replacedBy":"127"},{"ruleId":"108","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":2,"column":46,"nodeType":"131","messageId":"132","endLine":2,"endColumn":50},{"ruleId":"129","severity":1,"message":"133","line":2,"column":52,"nodeType":"131","messageId":"132","endLine":2,"endColumn":61},{"ruleId":"129","severity":1,"message":"134","line":2,"column":70,"nodeType":"131","messageId":"132","endLine":2,"endColumn":75},{"ruleId":"129","severity":1,"message":"135","line":2,"column":87,"nodeType":"131","messageId":"132","endLine":2,"endColumn":99},{"ruleId":"136","severity":1,"message":"137","line":132,"column":29,"nodeType":"116","endLine":132,"endColumn":71},{"ruleId":"114","severity":1,"message":"117","line":148,"column":37,"nodeType":"116","endLine":154,"endColumn":44},{"ruleId":"114","severity":1,"message":"117","line":170,"column":37,"nodeType":"116","endLine":176,"endColumn":44},{"ruleId":"114","severity":1,"message":"117","line":192,"column":37,"nodeType":"116","endLine":198,"endColumn":44},{"ruleId":"114","severity":1,"message":"117","line":215,"column":37,"nodeType":"116","endLine":221,"endColumn":43},{"ruleId":"114","severity":1,"message":"138","line":237,"column":45,"nodeType":"116","endLine":239,"endColumn":52},{"ruleId":"114","severity":1,"message":"115","line":245,"column":37,"nodeType":"116","endLine":246,"endColumn":66},{"ruleId":"114","severity":1,"message":"118","line":255,"column":37,"nodeType":"116","endLine":257,"endColumn":68},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],["139"],["140"],["139"],["140"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["139"],["140"],["139"],["140"],["139"],["140"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'FormGroup' is defined but never used.","'Input' is defined but never used.","'FormFeedback' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]