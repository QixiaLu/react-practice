[{"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/dishes.js":"1","/Users/lulu/Desktop/Coursera/React/confusion/src/components/ContactComponent.js":"2","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/configureStore.js":"3","/Users/lulu/Desktop/Coursera/React/confusion/src/App.js":"4","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/leaders.js":"5","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/comments.js":"6","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/promotions.js":"7","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/ActionTypes.js":"8","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/ActionCreators.js":"9","/Users/lulu/Desktop/Coursera/React/confusion/src/redux/Forms.js":"10","/Users/lulu/Desktop/Coursera/React/confusion/src/components/AboutComponent.js":"11","/Users/lulu/Desktop/Coursera/React/confusion/src/components/HeaderComponent.js":"12","/Users/lulu/Desktop/Coursera/React/confusion/src/components/MainComponent.js":"13"},{"size":597,"mtime":1611380588889,"results":"14","hashOfConfig":"15"},{"size":13415,"mtime":1611372426867,"results":"16","hashOfConfig":"15"},{"size":837,"mtime":1611374068189,"results":"17","hashOfConfig":"15"},{"size":640,"mtime":1611202554083,"results":"18","hashOfConfig":"15"},{"size":175,"mtime":1611283236551,"results":"19","hashOfConfig":"15"},{"size":684,"mtime":1611381415466,"results":"20","hashOfConfig":"15"},{"size":599,"mtime":1611381476941,"results":"21","hashOfConfig":"15"},{"size":405,"mtime":1611381668968,"results":"22","hashOfConfig":"15"},{"size":4274,"mtime":1611407626679,"results":"23","hashOfConfig":"15"},{"size":161,"mtime":1611371945199,"results":"24","hashOfConfig":"15"},{"size":4236,"mtime":1610711353048,"results":"25","hashOfConfig":"15"},{"size":5332,"mtime":1610865431971,"results":"26","hashOfConfig":"15"},{"size":3736,"mtime":1611407722248,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cmip7r",{"filePath":"30","messages":"31","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/dishes.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/ContactComponent.js",["56","57","58","59","60","61","62","63","64","65","66","67"],"import React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, FormGroup, Label, Input, Col, Row, FormFeedback }from 'reactstrap'\nimport { Link } from 'react-router-dom';\nimport { Control, Form, Errors, actions } from 'react-redux-form';\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => (val) && (val.length >= len);\nconst isNumber = (val) => !isNaN(Number(val));\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass Contact extends Component {\n\n    constructor(props){\n        super(props);\n\n        // this.state = {\n        //     firstname: '',\n        //     lastname: '',\n        //     telnum: '',\n        //     email: '',\n        //     agree: false,\n        //     contactType: 'Tel.',\n        //     message: '', \n        //     touched: {\n        //         firstname: false,\n        //         lastname: false,\n        //         telnum: false,\n        //         email: false \n        //     }\n        // }\n\n        // this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // handleInputChange(event){\n    //     const target = event.target;\n    //     const value= target.type === 'checkbox' ? target.checked : target.value;\n    //     const name = target.name;\n        \n    //     this.setState({\n    //         [name]: value\n    //     });\n    // }\n\n    handleSubmit(values){\n        console.log('Current State is: ' + JSON.stringify(values));\n        alert('Current State is ' + JSON.stringify(values));\n        this.props.resetFeedbackForm();\n        // event.preventDefault();\n    }\n\n    // // change fields to be true\n    // handleBlur = (field) => (evt) => {\n    //     this.setState({\n    //         touched: { ...this.state.touched, [field]: true}\n    //     });\n    // }\n\n    // // validate fields\n    // validate(firstname, lastname, telnum, email) {\n    //     const errors = {\n    //         firstname: '',\n    //         lastname: '',\n    //         telnum: '',\n    //         email: ''\n    //     };\n\n    //     if(this.state.touched.firstname && firstname.length < 3){\n    //         errors.firstname = 'First Name should be >= 3 characters';\n    //     }else if (this.state.touched.firstname && firstname.length > 10){\n    //         errors.firstname = 'First Name should be <= 10 characters';\n    //     }\n\n    //     if(this.state.touched.lastname && lastname.length < 2){\n    //         errors.lastname = 'Last Name should be >= 2 characters';\n    //     }else if (this.state.touched.lastname && lastname.length > 10){\n    //         errors.lastname = 'Last Name should be <= 10 characters';\n    //     }\n\n    //     // regression expression to test whether should be all numbers or not\n    //     const reg = /^\\d+$/;\n    //     if (this.state.touched.telnum && !reg.test(telnum)){\n    //         errors.telnum = 'Tel. Number should only contain numbers';\n    //     }\n\n    //     if(this.state.touched.email && email.split('').filter(x=>x==='@').length !== 1)\n    //         errors.email = 'Email shoudl contain a @';\n        \n    //     return errors;\n    // }\n\n    render () {\n        // const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                        <Breadcrumb>\n                            <BreadcrumbItem> \n                                <Link to='/home'>Home</Link>\n                            </BreadcrumbItem>\n                            <BreadcrumbItem active>Contact Us\n                            </BreadcrumbItem>\n                        </Breadcrumb>\n                        <div className=\"col-12\">\n                            <h3>Contact Us</h3>\n                            {/* a break */}\n                            <hr />\n                        </div>\n                    </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                    <h3>Location Information</h3>\n                    </div>\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\n                            <h5>Our Address</h5>\n                            <address>\n                            121, Clear Water Bay Road<br />\n                            Clear Water Bay, Kowloon<br />\n                            HONG KONG<br />\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\n                            </address>\n                    </div>\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\n                        <h5>Map of our Location</h5>\n                    </div>\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\n                        <div className=\"btn-group\" role=\"group\">\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h3>\n                            Send us your feedback\n                        </h3>\n                    </div>\n                    <div className=\"col-12 col-md-9\">\n                    <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\n                                        placeholder=\"First Name\"\n                                        className=\"form-control\"\n                                        validators = {{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".firstname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\n                                        placeholder=\"Last Name\"\n                                        className=\"form-control\"\n                                        validators = {{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".lastname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\n                                        placeholder=\"Tel. Number\"\n                                        className=\"form-control\"\n                                        validators = {{\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".telnum\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\" \n                                        validators = {{\n                                            required, validEmail\n                                        }}\n                                        />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid Email Address'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 6, offset: 2}}>\n                                    <div className=\"form-check\">\n                                        <Label check>\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\n                                                className=\"form-check-input\"\n                                                 /> {' '}\n                                                <strong>May we contact you?</strong>\n                                        </Label>\n                                    </div>\n                                </Col>\n                                <Col md={{size: 3, offset: 1}}>\n                                    <Control.select model=\".contactType\" name=\"contactType\"\n                                        className=\"form-control\">\n                                        <option>Tel.</option>\n                                        <option>Email</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\n                                        rows=\"12\"\n                                        className=\"form-control\" />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size:10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                    Send Feedback\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Contact;",["68","69"],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/configureStore.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/App.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/leaders.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/comments.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/promotions.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/ActionTypes.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/ActionCreators.js",["70"],"/Users/lulu/Desktop/Coursera/React/confusion/src/redux/Forms.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/AboutComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/HeaderComponent.js",[],"/Users/lulu/Desktop/Coursera/React/confusion/src/components/MainComponent.js",["71"],{"ruleId":"72","severity":1,"message":"73","line":2,"column":46,"nodeType":"74","messageId":"75","endLine":2,"endColumn":55},{"ruleId":"72","severity":1,"message":"76","line":2,"column":64,"nodeType":"74","messageId":"75","endLine":2,"endColumn":69},{"ruleId":"72","severity":1,"message":"77","line":2,"column":81,"nodeType":"74","messageId":"75","endLine":2,"endColumn":93},{"ruleId":"72","severity":1,"message":"78","line":4,"column":33,"nodeType":"74","messageId":"75","endLine":4,"endColumn":40},{"ruleId":"79","severity":1,"message":"80","line":133,"column":29,"nodeType":"81","endLine":133,"endColumn":71},{"ruleId":"82","severity":1,"message":"83","line":149,"column":37,"nodeType":"81","endLine":155,"endColumn":44},{"ruleId":"82","severity":1,"message":"83","line":171,"column":37,"nodeType":"81","endLine":177,"endColumn":44},{"ruleId":"82","severity":1,"message":"83","line":193,"column":37,"nodeType":"81","endLine":199,"endColumn":44},{"ruleId":"82","severity":1,"message":"83","line":216,"column":37,"nodeType":"81","endLine":222,"endColumn":43},{"ruleId":"82","severity":1,"message":"84","line":238,"column":45,"nodeType":"81","endLine":240,"endColumn":52},{"ruleId":"82","severity":1,"message":"85","line":246,"column":37,"nodeType":"81","endLine":247,"endColumn":66},{"ruleId":"82","severity":1,"message":"86","line":256,"column":37,"nodeType":"81","endLine":258,"endColumn":68},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"72","severity":1,"message":"91","line":2,"column":10,"nodeType":"74","messageId":"75","endLine":2,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":34,"column":3,"nodeType":"94","messageId":"95","endLine":36,"endColumn":4},"no-unused-vars","'FormGroup' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'FormFeedback' is defined but never used.","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-native-reassign",["96"],"no-negated-in-lhs",["97"],"'DISHES' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]